{"version":3,"sources":["asssets/images/loading-bar.svg","components/Header/Header.jsx","components/Content/DetailSurah/Terjemahan.jsx","components/Content/DetailSurah/TypeSurah.jsx","components/Content/DetailSurah/DetailsSurah.jsx","components/Loading/Loading.jsx","components/Content/ListSurah/ListSurah.jsx","components/Content/Content.jsx","components/NavSearch/NavSearch.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Header","className","Component","Terjemahan","props","console","log","data","ayat","id","map","item","index","key","style","marginTop","padding","teks","defaultProps","Surah","infoSurah","arr","TypeSurah","typesurah","surat","type","DetailsSurah","nama","arti","ar","Loading","isLoading","src","require","alt","ListSurah","onHandleTitleSurah","dataSurah","onClick","asma","Content","length","isFetch","NavSearch","placeholder","name","value","this","surah","onChange","onHandleInput","searchedSurah","getSurahQuran","nomor","toUpperCase","onHandleHome","App","getDataQuran","axios","get","then","result","setState","hasil","state","catch","err","numberOfSurah","e","target","filter","toLowerCase","indexOf","tombolReset","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,yC,uICc5BC,E,iLAVT,OACG,6BACG,4BAAQC,UAAY,eACjB,wBAAIA,UAAa,cAAjB,yB,GALMC,aCCfC,EAAa,SAACC,GAEjB,OADAC,QAAQC,IAAIF,EAAMG,KAAKC,KAAKD,KAAKE,GAAI,mBAElC,wBAAIR,UAAU,QACX,0CACCG,EAAMG,KAAKC,KAAKD,KAAKE,GAAGC,KAAI,SAACC,EAAMC,GAAP,OAC1B,wBAAIC,IAAKD,EAAOE,MAAS,CACtBC,UAAW,OACXC,QAAS,SAERL,EAAKM,WAMrBd,EAAWe,aAAe,CACvBC,MAAW,uBACXC,UAAY,CACTZ,KAAQ,CACLD,KAAQ,CACLc,IAAQ,CACL,CACGJ,KAAO,cAEV,CACGA,KAAO,mBAeVd,QC7BAmB,EAbG,SAAClB,GAEhB,OADAC,QAAQC,IAAIF,EAAMmB,UAAUC,MAAMC,KAAM,cAErC,yBAAKxB,UAAU,aACZ,+CACqBG,EAAMmB,UAAUC,MAAMC,KAD3C,IACiD,6BAC7CrB,EAAMmB,UAAUC,MAAMhB,KAF1B,WAIA,8BCLHkB,EAAe,SAACtB,GAEnB,OADAC,QAAQC,IAAI,8BAA8BF,EAAMgB,WAE7C,yBAAKnB,UAAY,WACd,gCAAMG,EAAMgB,UAAUI,MAAMG,KAA5B,MAAqCvB,EAAMgB,UAAUI,MAAMI,KAA3D,OACA,kBAAC,EAAD,CAAWL,UAAWnB,EAAMgB,YAC5B,4BACIhB,EAAMgB,UAAUZ,KAAKD,KAAKsB,GAAGnB,KAAI,SAACC,EAAMC,GAAP,OAC5B,wBAAIC,IAAOD,EAAOE,MAAS,CACxBC,UAAW,OACXC,QAAS,SAERL,EAAKM,QAEPZ,QAAQC,IAAIF,EAAMgB,UAAUZ,KAAKD,KAAM,wBAG5C,kBAAC,EAAD,CAAYA,KAAMH,EAAMgB,eAMvCM,EAAaR,aAAe,CACzBC,MAAW,uBACXC,UAAY,CACTZ,KAAQ,CACLD,KAAQ,CACLc,IAAQ,CACL,CACGJ,KAAO,cAEV,CACGA,KAAO,mBAeVS,QClDTI,EAAU,SAAC,GACd,OAD8B,EAAfC,UAGT,yBAAK9B,UAAU,sBACZ,yBAAKA,UAAU,gBACZ,yBACG+B,IAAOC,EAAQ,IACfC,IAAI,WAMZ,MAGVJ,EAAQZ,aAAc,CACnBa,WAAW,GAMCD,QCvBTK,EAAY,SAAC/B,GAEhB,OADAC,QAAQC,IAAIF,EAAMgC,oBAEf,yBAAKnC,UAAU,SACXG,EAAMiC,UAAU3B,KAAI,SAACC,EAAMC,GAAP,OAClB,yBAAKC,IAAKD,EAAOX,UAAU,cACxB,uBAAGA,UAAU,kCACVqC,QAASlC,EAAMgC,oBAEdzB,EAAK4B,MAET,uBAAGtC,UAAU,mCACTU,EAAKgB,YAOxBQ,EAAUjB,aAAe,CACtBmB,UAAc,IAQFF,QCXAK,EAfC,SAACpC,GACd,OACG,yBAAKH,UAAU,aAEXG,EAAMiC,UAAUI,SAAWrC,EAAMgB,UAC7B,kBAAC,EAAD,CAAWnB,UAAU,YAAYoC,UAAWjC,EAAMiC,UAAWD,mBAAoBhC,EAAMgC,qBACpFhC,EAAMgB,WACL,kBAAC,EAAD,CAAcnB,UAAU,oBAAoBmB,UAAWhB,EAAMgB,YAGtE,kBAAC,EAAD,CAASW,UAAW3B,EAAMsC,YC+BpBC,EA5Cf,+KACUvC,GAAQ,IAAD,OACX,OACA,yBAAKH,UAAU,UACZ,yBAAKA,UAAU,qBACZ,2BACGwB,KAAc,SACdmB,YAAc,aACdC,KAAc,cACdC,MAAeC,KAAK3C,MAAM4C,MAC1BC,SAAeF,KAAK3C,MAAM8C,cAC1BjD,UAAc,sBAIZ8C,KAAK3C,MAAM4C,OAASD,KAAK3C,MAAM+C,cAAcV,OAEzC,yBAAKxC,UAAU,8BACZ,4BACI8C,KAAK3C,MAAM+C,cAAczC,KAAI,SAACC,EAAMC,GAClC,OACG,wBAAIC,IAAOD,GACR,4BACG0B,QAAa,kBAAK,EAAKlC,MAAMgD,cAAczC,EAAK0C,QAChDpD,UAAY,wBAFf,OAGQU,EAAKgB,KAAK2B,qBAOhC,KAEJ,4BAAQrD,UAAU,iBAAiBqC,QAASS,KAAK3C,MAAMmD,cAAvD,cAlClB,GAA+BrD,aC2GhBsD,E,YAtGZ,WAAYpD,GAAQ,IAAD,8BAChB,4CAAMA,KAcTqD,aAAe,WACZpD,QAAQC,IAAI,gBACZoD,IAAMC,IAAI,qDACTC,MAAM,SAAAC,GACJ,EAAKC,SAAS,CACXzB,UAAWwB,EAAOtD,KAAKwD,QACvB,kBACA1D,QAAQC,IAAI,EAAK0D,MAAM3B,UAAW,wBAErC4B,OAAO,SAAAC,GAAG,OAAI7D,QAAQC,IAAI,0BAA2B4D,OAxBxC,EA2BnBd,cAAgB,SAACe,GACd9D,QAAQC,IAAI,iBACZ,EAAKwD,SAAS,CACXpB,SAAS,IACV,WACCgB,IAAMC,IAAN,4DAA+DQ,EAA/D,eACCP,MAAM,SAAAC,GACJ,EAAKC,SAAU,CACZ1C,UAAcyC,EAAOtD,KACrBmC,SAAc,EACdM,MAAc,KACd,kBACA3C,QAAQC,IAAI,WAAW,EAAK0D,MAAM5C,UAAUI,MAAMG,YAErDsC,OAAO,SAAAC,GAAG,OAAI7D,QAAQC,IAAI,0BAA2B4D,UAzC3C,EA6CnBhB,cAAgB,SAACkB,GACd,EAAKN,SAAU,CACZd,MAAQoB,EAAEC,OAAOvB,QACjB,WACA,IAAI,EAAKkB,MAAMtB,QAAQ,CACpB,IAAMS,EAAgB,EAAKa,MAAM3B,UAAUiC,QAAO,SAAA3D,GAC/C,OAAOA,EAAKgB,KAAK4C,cAAcC,QAAQ,EAAKR,MAAMhB,MAAMuB,gBAAkB,KAE7E,EAAKT,SAAS,CACXX,kBACA,oBAvDO,EA+DnBI,aAAe,WACZlD,QAAQC,IAAI,6BACZ,EAAKwD,SAAS,CACX1C,UAAW,OACZ,kBAAIf,QAAQC,IAAI,qBAAuB,EAAK0D,MAAM5C,eAnEpC,EAqEnBgB,mBAAqB,SAACgC,GACnB/D,QAAQC,IAAI,gBAAgB8D,IApE5B,EAAKJ,MAAQ,CACV3B,UAAiB,GACjBjB,UAAkB,KAClB4B,MAAiB,GACjBN,SAAiB,EACjBS,cAAiB,IAPJ,E,iFAWhB9C,QAAQC,IAAI,sBACZyC,KAAKU,iB,+BA4DC,MAE4DV,KAAKiB,MAA/D3B,EAFF,EAEEA,UAAWjB,EAFb,EAEaA,UAAWsB,EAFxB,EAEwBA,QAASS,EAFjC,EAEiCA,cAAeH,EAFhD,EAEgDA,MAC9CE,EAAkEH,KAAlEG,cAAeE,EAAmDL,KAAnDK,cAAcG,EAAqCR,KAArCQ,aAAcnB,EAAuBW,KAAvBX,mBAEnD,OACG,yBAAKnC,UAAU,4BAEZ,kBAAC,EAAD,MAEA,kBAAC,EAAD,CACGkD,cAAkBA,EAClBH,MAAkBA,EAClBE,cAAkBA,EAClBE,cAAkBA,EAClBG,aAAkBA,IAGrB,kBAAC,EAAD,CACGkB,YAAgBlB,EAChBb,QAAgBA,EAChBL,UAAgBA,EAChBjB,UAAgBA,EAChBgB,mBAAsBA,S,GAhGnBlC,aCMEwE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdtB,OAAM,SAAAuB,GACLnF,QAAQmF,MAAMA,EAAMC,c","file":"static/js/main.8f945f08.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading-bar.40f10a2e.svg\";","import React, { Component } from 'react'\n\nclass Header extends Component {\n   render() {\n      return (\n         <div>\n            <header className = 'header mb-5'>\n               <h3 className  = 'text-light'> QUR'AN ONLINE </h3>\n            </header>\n         </div>            \n      )\n   }\n}\n\nexport default Header\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Terjemahan = (props) => {\n   console.log(props.data.ayat.data.id, 'page terjemahan')\n   return(\n      <ul className=\"mt-5\">\n         <h5>Terjemahan</h5>\n         {props.data.ayat.data.id.map((item, index) => (\n            <li key={index} style = {{\n               marginTop: \"20px\",\n               padding: \"20px\"\n            }}>\n               {item.teks}\n            </li> \n         ))}\n      </ul>\n   )\n}\nTerjemahan.defaultProps = {\n   Surah    : 'surah dalam al-quran',\n   infoSurah : {\n      ayat  : {\n         data  : {\n            arr   : [\n               {\n                  teks : 'Ini ayat 1'\n               },\n               {\n                  teks : 'Ini ayat 2'\n               }\n            ]\n         }\n      }\n   }\n}\nTerjemahan.propTypes = {\n   Surah : PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string \n   ]),\n   infoSurah: PropTypes.object\n}\n\nexport default Terjemahan","import React from 'react'\n\nconst TypeSurah = (props) => {\n   console.log(props.typesurah.surat.type, 'type surah')\n   return(\n      <div className=\"typeSurah\">\n         <p>\n            Termasuk Surah : {props.typesurah.surat.type} <br/>\n            {props.typesurah.surat.ayat} : Ayat \n         </p>\n         <p></p>\n      </div>\n   )\n}\n\nexport default TypeSurah","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Terjemahan from './Terjemahan'\nimport TypeSurah from './TypeSurah'\n\nconst DetailsSurah = (props) => {\n   console.log('isi props pada detailssurah',props.infoSurah)\n   return (\n      <div className = \"content\" >\n         <h5> {props.infoSurah.surat.nama} ( {props.infoSurah.surat.arti} ) </h5>\n         <TypeSurah typesurah={props.infoSurah} />\n         <ol>  \n            {props.infoSurah.ayat.data.ar.map((item, index) => (\n                  <li key = {index} style = {{\n                     marginTop: \"20px\",\n                     padding: \"20px\"\n                  }}>\n                     {item.teks}\n                  </li>\n                  ),console.log(props.infoSurah.ayat.data, 'bujutuyulurusuwugud')\n                  )  \n               }\n               <Terjemahan data={props.infoSurah} />\n               \n         </ol>\n      </div>\n   )\n}\nDetailsSurah.defaultProps = {\n   Surah    : 'surah dalam al-quran',\n   infoSurah : {\n      ayat  : {\n         data  : {\n            arr   : [\n               {\n                  teks : 'Ini ayat 1'\n               },\n               {\n                  teks : 'Ini ayat 2'\n               }\n            ]\n         }\n      }\n   }\n}\nDetailsSurah.propTypes = {\n   Surah : PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.string \n   ]),\n   infoSurah: PropTypes.object\n}\n\nexport default DetailsSurah","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Loading = ({isLoading}) => { \n   if (isLoading) {\n      return (\n         <div className=\"loading__container\">\n            <div className=\"loading__bar\">\n               <img \n                  src = {require('../../asssets/images/loading-bar.svg')}\n                  alt=\"logo\"\n                />\n            </div>\n         </div>\n      )\n   }\n   return null\n}\n\nLoading.defaultProps= {\n   isLoading: false,\n}\nLoading.propTypes = {\n   isLoading : PropTypes.bool\n}\n\nexport default Loading","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst ListSurah = (props) => {\n   console.log(props.onHandleTitleSurah)\n   return(\n      <div className=\"surah\">\n         {props.dataSurah.map((item, index) => (\n            <div key={index} className=\"surah__box\">\n               <p className=\"surah__asma surah__text--center\"\n                  onClick={props.onHandleTitleSurah}\n               >\n                  {item.asma}\n               </p>\n               <p className=\"surah__name surah__text--center\" >\n                  {item.nama}\n               </p>\n            </div>\n         ))}\n      </div>\n   )\n}\nListSurah.defaultProps = {\n   dataSurah   : []\n}\nListSurah.propTypes = {\n   dataSurah   : PropTypes.array \n}\n\n\n\nexport default ListSurah","import React from 'react'\nimport DetailsSurah from '../Content/DetailSurah/DetailsSurah'\nimport Loading from '../Loading/Loading'\nimport ListSurah from './ListSurah/ListSurah'\n\nconst Content = (props) => {\n   return(\n      <div className=\"container\">\n         {\n         (props.dataSurah.length && !props.infoSurah)\n            ? <ListSurah className=\"container\" dataSurah={props.dataSurah} onHandleTitleSurah={props.onHandleTitleSurah} />\n               : props.infoSurah && (\n                  <DetailsSurah className=\"container bg-dark\" infoSurah={props.infoSurah} />\n               )\n         }\n         <Loading isLoading={props.isFetch} />\n      </div>\n   )\n}\n\nexport default Content  ","import React, { Component } from 'react'\n\nexport class NavSearch extends Component {\n   render(props) {\n      return (\n      <div className=\"search\">\n         <nav className=\"search__container\">\n            <input \n               type        = \"search\" \n               placeholder = \"Cari Surah\" \n               name        = \"input-surah\"\n               value       = {this.props.surah}\n               onChange    = {this.props.onHandleInput} \n               className   = \"search__input-box\" \n            />\n\n               {/* list suggestion form input*/}\n               { this.props.surah && this.props.searchedSurah.length\n                  ? (\n                     <div className=\"search__suggest__container\">\n                        <ul>\n                           {this.props.searchedSurah.map((item, index) => {\n                              return (\n                                 <ol key = {index}>\n                                    <button\n                                       onClick  = { ()=> this.props.getSurahQuran(item.nomor)}\n                                       className = \"search__suggest__btn\">\n                                       Q.S {item.nama.toUpperCase()}\n                                    </button>\n                                 </ol>\n                              )\n                           })}\n                        </ul>\n                     </div>\n                  ) : null\n               }\n                  <button className=\"search__button\" onClick={this.props.onHandleHome} >\n               Home\n            </button>\n         </nav>\n      </div>\n      )\n   }\n}\n\n\nexport default NavSearch\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport Header from './components/Header/Header'\nimport Content from './components/Content/Content'\nimport NavSearch from './components/NavSearch/NavSearch'\n\nclass App extends Component {\n   constructor(props) {\n      super(props)\n      this.state = {\n         dataSurah      : [],    //state.surah\n         infoSurah       : null, //state.infoSurah\n         surah          : '',    //state.surah\n         isFetch        : false, //state.isFetch\n         searchedSurah  : [],    //state.searchSurah\n      }\n   }\n   componentDidMount(){\n      console.log('component didmount')\n      this.getDataQuran()\n   }\n   // function getDataQuran berfungsi memanggil API surah \n   getDataQuran = () => {\n      console.log('getDataQuran')\n      axios.get('https://api.banghasan.com/quran/format/json/surat')\n      .then( result => {\n         this.setState({\n            dataSurah: result.data.hasil\n         }, () => \n            console.log(this.state.dataSurah, 'get dataQuran!')\n         )\n      }).catch( err => console.log('getDataQuran failed! : ', err) );\n   }\n   // function getSurahQuran berfungsi memanggil API surah \n   getSurahQuran = (numberOfSurah) => {\n      console.log('getSurahQuran')\n      this.setState({\n         isFetch: true\n      },()=>{\n         axios.get(`https://api.banghasan.com/quran/format/json/surat/${numberOfSurah}/ayat/1-10`)\n         .then( result => {\n            this.setState ({  \n               infoSurah   : result.data,\n               isFetch     : false, \n               surah       : ''\n            }, () => \n               console.log('surah : ',this.state.infoSurah.surat.nama  )\n            )\n         }).catch( err => console.log('getSurahQuran failed! :', err) );\n      })\n   }\n   // function untuk menghandle tag input pada form searchBar\n   onHandleInput = (e) => {\n      this.setState ({\n         surah : e.target.value\n      }, () => {\n         if(!this.state.isFetch){\n            const searchedSurah = this.state.dataSurah.filter(item=>{\n               return item.nama.toLowerCase().indexOf(this.state.surah.toLowerCase()) > -1 //membaca value typewrite dimulai dari index 0 \n            })\n            this.setState({\n               searchedSurah\n            }, () => {\n            })\n\n            \n         }\n      })\n   }\n   // function untuk menghandle tombol home reset state Infosurah\n   onHandleHome = () => {\n      console.log('tombol button home diklik');\n      this.setState({\n         infoSurah: null\n      },()=>console.log('tombol home diklik' , this.state.infoSurah))\n   }\n   onHandleTitleSurah = (e) => {\n      console.log('title onCLick',e)\n   }\n   render() {\n      // destructor assignments supaya lebih simple dan rapih slurr :)\n      const { dataSurah, infoSurah, isFetch, searchedSurah, surah,  } = this.state\n      const { onHandleInput, getSurahQuran,onHandleHome, onHandleTitleSurah } = this\n\n      return (\n         <div className='container-fluid bg-light'>\n            {/* Header */}\n            <Header />\n            {/* search bar */}\n            <NavSearch\n               searchedSurah  = {searchedSurah}\n               surah          = {surah}\n               onHandleInput  = {onHandleInput}\n               getSurahQuran  = {getSurahQuran}\n               onHandleHome   = {onHandleHome}\n            />\n            {/* content */}\n            <Content\n               tombolReset =  {onHandleHome}\n               isFetch     =  {isFetch}\n               dataSurah   =  {dataSurah} \n               infoSurah   =  {infoSurah} \n               onHandleTitleSurah = {onHandleTitleSurah}\n             />\n         </div>\n      )\n   }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './asssets/scss/index.scss';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}